/*
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
class Solution
{
    private:
        void inorder(Node* root,vector<int>&temp)
        {
            if(root==NULL)
            {
                return;
            }
            inorder(root->left,temp);
            temp.push_back(root->data);
            inorder(root->right,temp);
        }
    public:
    //Function to return a list of integers denoting the node 
    //values of both the BST in a sorted order.
    vector<int> merge(Node *root1, Node *root2)
    {
       vector<int>temp1,temp2;
       inorder(root1,temp1);
       inorder(root2,temp2);
       int i=0;
       int j=0;
       vector<int>temp;
       while(i<temp1.size() && j< temp2.size())
       {
           if(temp1[i] <= temp2[j])
           {
               temp.push_back(temp1[i++]);
           }
           else
           {
               temp.push_back(temp2[j++]);
           }
       }
       while(i<temp1.size())
       {
           temp.push_back(temp1[i++]);
       }
       while(j<temp2.size())
       {
           temp.push_back(temp2[j++]);
       }
       return temp;
       
    }
};
