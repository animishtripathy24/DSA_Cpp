class Solution {
private:
    void bfs(int row,int col,vector<vector<int>>&vis,vector<vector<char>>&grid)
    {
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<int,int>>q;
        q.push({row,col});
        vis[row][col]=1;

        while(!q.empty())
        {
            auto it=q.front();
            q.pop();
            int row=it.first;
            int col=it.second;

            //traverse in the neighbours and mark them if they are land
            for(int delrow=-1;delrow<=1;delrow++)
            {
                for(int delcol=-1;delcol<=1;delcol++)
                {
                    if(abs(delrow)+abs(delcol)==2)
                    {
                        continue; //continue for diagonal neighbours 
                    }
                    int nrow=row+delrow;
                    int ncol=col+delcol;
                    if(nrow >=0 && nrow <n && ncol>=0 && ncol<m && !vis[nrow][ncol] && grid[nrow][ncol]=='1')
                    {
                        vis[nrow][ncol]=1;
                        q.push({nrow,ncol});
                    }
                }
            }

        }
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        //at first we have to calculate the size of the matrix
        int n=grid.size();
        int m=grid[0].size();

        //now we have to create a visited 2d vector
        vector<vector<int>>vis(n,vector<int>(m,0));

        //now we have to traverse in the vector and check for the starting point
        int count=0;
        for(int row=0 ; row<n ; row++)
        {
            for(int col=0 ; col<m ; col++)
            {
                if(!vis[row][col] && grid[row][col]=='1')
                {
                    count++;
                    bfs(row,col,vis,grid);
                }
            }
        }
        return count;
        
    }
}; 
