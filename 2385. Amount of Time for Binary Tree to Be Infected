/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void make_parent(TreeNode* root,unordered_map<TreeNode*,TreeNode*>&parent)
    {
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty())
        {
            TreeNode* curr=q.front();
            q.pop();
            if(curr->left)
            {
                parent[curr->left]=curr;
                q.push(curr->left);
            }
            if(curr->right)
            {
                parent[curr->right]=curr;
                q.push(curr->right);
            }
        }
    }
    void findStartNode(TreeNode* root,int start,TreeNode* &startNode)
    {
        if(root==NULL)
        {
            return;
        }
        if(root->val == start)
        {
            startNode=root;
            return;
        }
        findStartNode(root->left,start,startNode);
        findStartNode(root->right,start,startNode);
        return;
        
    }
public:
    int amountOfTime(TreeNode* root, int start) {
        unordered_map<TreeNode*,TreeNode*>parent;
        make_parent(root,parent);
        //then we have to make a visited map to keep track of the visited node 
        unordered_map<TreeNode*,bool>visited;
        queue<TreeNode*>q;
        TreeNode* startNode=NULL;
        findStartNode(root,start,startNode);
        q.push(startNode);
        //mark the startNode as visited
        visited[startNode]=true;
        int minTime=-1;
        while(!q.empty())
        {
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                TreeNode* curr=q.front();
                q.pop();
                if(curr->left && !visited[curr->left])
                {
                    q.push(curr->left);
                    visited[curr->left]=true;
                }
                if(curr->right && !visited[curr->right])
                {
                    q.push(curr->right);
                    visited[curr->right]=true;
                }
                if(parent[curr] && !visited[parent[curr]])
                {
                    q.push(parent[curr]);
                    visited[parent[curr]]=true;
                }
            }
            minTime++;
        }
        return minTime;
    }
};
