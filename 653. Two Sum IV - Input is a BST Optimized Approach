/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator_next
{
    private:stack<TreeNode*>s;
    public:
        BSTIterator_next(TreeNode* root)
        {
            pushAll(root);
        }
        int next()
        {
            TreeNode* curr=s.top();
            s.pop();
            //go to right and push all the left
            pushAll(curr->right);
            return curr->val;

        }
    private:
        void pushAll(TreeNode* root)
        {
            while(root)
            {
                s.push(root);
                root=root->left;
            }
        }
};

class BSTIterator_before
{
    private:stack<TreeNode*>s;
    public:
        BSTIterator_before(TreeNode* root)
        {
            pushAll(root);
        }
        int before()
        {
            TreeNode* curr=s.top();
            s.pop();
            //go to right and push all the left
            pushAll(curr->left);
            return curr->val;

        }
    private:
        void pushAll(TreeNode* root)
        {
            while(root)
            {
                s.push(root);
                root=root->right;
            }
        }
};
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(!root)
        {
            return 0;
        }

        BSTIterator_next* start=new BSTIterator_next(root);
        BSTIterator_before* end=new BSTIterator_before(root);

        int i=start->next();
        int j=end->before();

        while(i<j)
        {
            if(i+j==k)
            {
                return 1;
            }
            else if(i+j <k )
            {
                i=start->next();
            }
            else
            {
                j=end->before();
            }
        }
        return 0;
        
    }
};
