class Solution {
private:
    bool dfs(vector<vector<char>>& board, const string& word, int row, int col, int idx) {
        if (idx == word.length())
            return true;

        if (row < 0 || row >= board.size() || col < 0 || col >= board[0].size() || board[row][col] != word[idx])
            return false;

        char original = board[row][col];
        board[row][col] = '#';

        bool result = dfs(board, word, row + 1, col, idx + 1) ||
                      dfs(board, word, row - 1, col, idx + 1) ||
                      dfs(board, word, row, col + 1, idx + 1) ||
                      dfs(board, word, row, col - 1, idx + 1);

        board[row][col] = original;

        return result;
    }

public:
    bool exist(vector<vector<char>>& board, string word) {
        for (int i = 0; i < board.size(); ++i) {
            for (int j = 0; j < board[0].size(); ++j) {
                if (board[i][j] == word[0]) {
                    if (dfs(board, word, i, j, 0))
                        return true;
                }
            }
        }
        return false;
    }
};
