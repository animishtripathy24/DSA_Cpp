class Solution {
public:
	bool isPossible(int N,int P, vector<pair<int, int> >& prerequisites) {
	    // at first we have to create a graph for this
	    vector<int>adj[N];
	    for(auto it:prerequisites)
	    {
	        adj[it.first].push_back(it.second);
	    }
	    
	    //now we have to calculate the indegree
	    int indegree[N]={0};
	    for(int i=0;i<N;i++)
	    {
	        for(auto it:adj[i])
	        {
	            indegree[it]++;
	        }
	    }
	    //now we have to declare a queue and push all the elements with zero indegree
	    queue<int>q;
	    for(int i=0;i<N;i++)
	    {
	        if(indegree[i]==0)
	        {
	            q.push(i);
	        }
	    }
	    
	    //we have to declare a topo array
	    vector<int>topo;
	    //now we have to traverse in the queue
	    while(!q.empty())
	    {
	        int node=q.front();
	        q.pop();
	        topo.push_back(node);
	        
	        for(auto it:adj[node])
	        {
	            indegree[it]--;
	            if(indegree[it]==0)
	            {
	                q.push(it);
	            }
	        }
	        
	        
	    }
	    if(N==topo.size())
	    {
	        return true;
	    }
	    return false;
	}
};
