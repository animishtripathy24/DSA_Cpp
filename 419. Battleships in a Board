class Solution {
private:
    private:
    void bfs(int row,int col,vector<vector<char>>&grid,vector<vector<bool>>&vis)
    {
        int n=grid.size();
        int m=grid[0].size();
        //at first mark the rows and columns in the visited matrix
        vis[row][col]=true;
        queue<pair<int,int>>q;
        q.push({row,col});

        while(!q.empty())
        {
            auto it=q.front();
            q.pop();
            int row=it.first;
            int col=it.second;

            for(int delrow=-1;delrow<=1;delrow++)
            {
                for(int delcol=-1;delcol<=1;delcol++)
                {   
                    //ignore the diagonal ones
                    if(abs(delrow)+abs(delcol)==2)
                    {
                        continue;
                    }
                    int newrow=row+delrow;
                    int newcol=col+delcol;
                    if(newrow >=0 && newrow <n && newcol>=0 && newcol<m && !vis[newrow][newcol] && grid[newrow][newcol]=='X')
                    {
                        vis[newrow][newcol]=true;
                        q.push({newrow,newcol});
                    }
                }   
            }
        }
    }
public:
    int countBattleships(vector<vector<char>>& board) {
        int n=board.size();
        int m=board[0].size();

        vector<vector<bool>>vis(n,vector<bool>(m,false));

        int count=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j] && board[i][j]=='X')
                {
                    bfs(i,j,board,vis);
                    count++;
                }
            }
        }
        return count;
    }
};
