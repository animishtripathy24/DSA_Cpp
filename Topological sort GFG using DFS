class Solution
{
    private:
        void dfs(int node,int vis[],stack<int>&s,vector<int>adj[])
        {
            //at first we have to mark it in our visited array
            vis[node]=true;
            for(auto it:adj[node])
            {
                if(!vis[it])
                {
                    dfs(it,vis,s,adj);
                }
            }
            s.push(node);
        }
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    //at first we have to declare a visited array
	    int vis[V]={0};
	    //then we have to declare a stack
	    stack<int>s;
	    
	    //now we have to run a for loop
	    for(int i=0;i<V;i++)
	    {
	        if(!vis[i])
	        {
	            dfs(i,vis,s,adj);
	        }
	    }
	    vector<int>ans;
	    while(!s.empty())
	    {
	        ans.push_back(s.top());
	        s.pop();
	    }
	    return ans;
	    
	}
};
