/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    void insertAtTail(ListNode* &tail,ListNode* curr)
    {
        tail->next=curr;
        tail=tail->next;
    }
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        //we have to first declare a min heap
        priority_queue<pair<int,ListNode*>,vector<pair<int,ListNode*>>,greater<pair<int,ListNode*>>>pq;
        //we have to put the head of all the lists in the priority queue
        for(int i=0;i<lists.size();i++)
        {
            if(lists[i])
            {
                pq.push({lists[i]->val,lists[i]});
            }
        }
        //now we will create a dummy node
        ListNode* dummy=new ListNode(-1);
        ListNode* temp=dummy;
        while(!pq.empty())
        {
            auto it=pq.top();
            pq.pop();
            int number=it.first;
            ListNode* node=it.second;
            insertAtTail(temp,node);
            if(node->next != NULL)
            {
                pq.push({node->next->val,node->next});
            }
        }
        return dummy->next;

    }
};
