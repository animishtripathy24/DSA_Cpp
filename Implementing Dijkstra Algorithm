class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        //at first we have to declare a min heap
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        //at first we have to push the src node with distance as zero
        pq.push({0,S}); //{distance,node}
        //now we have to declare a distance array
        vector<int>dist(V);
        for(int i=0;i<V;i++)
        {
            dist[i]=1e9;
        }
        //mark the distance of the src node as 0
        dist[S]=0;
        while(!pq.empty())
        {
            auto it=pq.top();
            pq.pop();
            int distance=it.first;
            int node=it.second;
            
            //traverse for all its adjacent nodes
            for(auto &it:adj[node])
            {
                int edgewt=it[1];
                int adjNode=it[0];
                if(distance+edgewt<dist[adjNode])
                {
                    dist[adjNode]=distance+edgewt;
                    pq.push({dist[adjNode],adjNode});
                }
            }
            
        }
        return dist;
    }
};
