bool isSafe(int row,int col,int n,vector<vector<int>>&board)
{
    int duprow=row;
    int dupcol=col;

    //checking for the left side
    while(col >= 0)
    {
        if(board[row][col]==1)
        {
            return 0;
        }
        col--;
    }
    row=duprow;
    col=dupcol;
    //checking for the lower diagonal
    while(row <n && col >= 0)
    {
        if(board[row][col]==1)
        {
            return 0;
        }
        row++;
        col--;
    }

    row=duprow;
    col=dupcol;

    //checking for the upper diagonal
    while(row >=0 && col >=0)
    {
        if(board[row][col]==1)
        {
            return  0;
        }
        row--;
        col--;
    }
    return 1;
}
void solve(int col,vector<vector<int>>&board,int n,vector<vector<int>>&ans)
{
    //base case
    if(col == n)
    {
        vector<int>permutation;
        for(auto &row:board)
        {
            for(auto &value:row)
            {
                permutation.push_back(value);
            }
        }
        ans.push_back(permutation);
    }

    //we have to compute for each row in a column
    for(int row=0 ; row < n ; row++)
    {
        if(isSafe(row,col,n,board))
        {
            board[row][col]=1;
            solve(col+1,board,n,ans);
            //backtracking step
            board[row][col]=0;
        }
    }
}
vector<vector<int>> solveNQueens(int n) {
    vector<vector<int>>ans;
    int col=0;
    vector<vector<int>>board(n,vector<int>(n,0));
    solve(col,board,n,ans);
    return ans;
}
