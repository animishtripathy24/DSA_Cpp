class Solution {
private:
    vector<int> bfs(int node,vector<int>adjRev[],vector<int>&vis)
    {
        vector<int>temp;
        queue<int>q;
        q.push(node);
        vis[node]=1;
        while(!q.empty())
        {
            int curr=q.front();
            q.pop();

            if(curr != node)
            {
                temp.push_back(curr);
            }
            for(auto &it:adjRev[curr])
            {
                if(!vis[it])
                {
                    vis[it]=1;
                    q.push(it);
                }
            }
        }
        sort(temp.begin(),temp.end());
        return temp;
    }
public:
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        //at first we have to reverse all the edges
        vector<int>adjRev[n];
        for(auto &it:edges)
        {
            adjRev[it[1]].push_back(it[0]);
        }
        vector<vector<int>>ans;
        for(int i=0;i<n;i++)
        {
            vector<int>vis(n,0);
            vector<int>temp=bfs(i,adjRev,vis);
            ans.push_back(temp);
        }
        return ans;
    }
};
