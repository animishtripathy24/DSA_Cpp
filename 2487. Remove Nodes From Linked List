/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    ListNode* reverse(ListNode* head)
    {
        ListNode* curr=head;
        ListNode* prev=NULL;
        ListNode* next=NULL;
        while(curr != NULL)
        {
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    void insertAtTail(ListNode* &tail,ListNode* curr)
    {
        tail->next=curr;
        tail=tail->next;
    }
public:
    ListNode* removeNodes(ListNode* head) {
        ListNode* newHead=reverse(head);
        int maxi=newHead->val;
        stack<int>s;
        s.push(maxi);
        ListNode* curr=newHead->next;
        while(curr != NULL)
        {
            if(curr->val >= maxi)
            {
                maxi=curr->val;
                s.push(curr->val);
            }
            curr=curr->next;
        }
        ListNode* dummy=new ListNode();
        ListNode* temp=dummy;
        while(!s.empty())
        {
            ListNode* newNode=new ListNode(s.top());
            insertAtTail(temp,newNode);
            s.pop();
        }
        return dummy->next;

    }
};
