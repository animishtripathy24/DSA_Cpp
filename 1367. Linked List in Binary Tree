/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool check(string &str,string &path)
    {
        for(int i=0;i<str.size();i++)
        {
            if(str[i]!=path[i])
            {
                return 0;
            }
        }
        return 1;
    }
    void solve(TreeNode* root,string& str,string& path,bool &final)
    {
        if(root==NULL)
        {
            return;
        }
        path.push_back(root->val+'0');
        if(path.size()==str.size())
        {
            if(check(str,path))
            {
                final=true;
            }
        }
        solve(root->left,str,path,final);
        solve(root->right,str,path,final);
        path.pop_back();
        return;
    }
    bool isSubPath(ListNode* head, TreeNode* root) {
        if(!root)
        {
            return 0;
        }
        bool final=false;
        ListNode* curr=head;
        string str;
        while(curr != NULL)
        {
            str.push_back(curr->val+'0');
            curr=curr->next;
        }
        string path;
        solve(root,str,path,final);
        if(final)
        {
            return 1;
        }
        return isSubPath(head,root->left) || isSubPath(head,root->right);
    }
};
