/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void solve(TreeNode* root,int targetSum,int &count,vector<int>&paths)
    {
        if(!root)
        {
            return;
        }
        paths.push_back(root->val);
        long long sum=0;
        int n=paths.size();
        //check for k sum paths in the vector starting from the end
        for(int i=n-1;i>=0;i--)
        {
            sum+=paths[i];
            if(sum==targetSum)
            {
                count=count+1;
            }
        }
        solve(root->left,targetSum,count,paths);
        solve(root->right,targetSum,count,paths);
        paths.pop_back();
    }
public:
    int pathSum(TreeNode* root, int targetSum) {
        int count=0;
        vector<int>paths;
        solve(root,targetSum,count,paths);
        return count;
    }
};
