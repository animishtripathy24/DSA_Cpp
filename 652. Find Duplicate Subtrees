/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    string getSubTreeString(TreeNode* root,unordered_map<string,int>&m,vector<TreeNode*>&res)
    {
        if(root == NULL)
        {
            return "N";
        }

        string s = to_string(root->val)+","+getSubTreeString(root->left,m,res)+","+getSubTreeString(root->right,m,res);

        auto it=m.find(s);
        if(it != m.end() && it->second == 1)
        {
            res.push_back(root);
        }
        m[s]++;

        return s;
    }
public:
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        //at first we have to declare a map to keep track of the strings
        unordered_map<string,int>m;
        vector<TreeNode*>res;

        getSubTreeString(root,m,res);

        return res;
    }
};
