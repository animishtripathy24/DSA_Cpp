class Solution {
  private:
    int solve(int n,vector<int>&dp,vector<int>cost)
    {
        if(n==0)
        {
            return dp[0];
        }
        if(n==1)
        {
            return dp[1];   
        }
        if(dp[n] != -1)
        {
            return dp[n];
        }
        dp[n]=cost[n]+min(solve(n-1,dp,cost),solve(n-2,dp,cost));
        return dp[n];
    }
  public:
    int minCostClimbingStairs(vector<int>&cost ,int N) {
        //creating a dp vector
        vector<int>dp(cost.size(),-1);
        dp[0]=cost[0];
        dp[1]=cost[1];

        int ans=min(solve(N-1,dp,cost),solve(N-2,dp,cost));
        return ans;
    }
};
