class Solution {
public:
    bool closeStrings(string word1, string word2) {
        //edge case
        if(word1.size() != word2.size())
        {
            return 0;
        }
        unordered_map<char,int>m1;
        unordered_map<char,int>m2;
        for(int i=0;i<word1.size();i++)
        {
            m1[word1[i]]++;
        }
        for(int i=0;i<word2.size();i++)
        {
            m2[word2[i]]++;
        }
        int count=0;
        for(auto &value:m1)
        {
            auto it=m2.find(value.first);
            if(it == m2.end())
            {
                return 0;
            }
            else
            {
                if(value.second != it->second)
                {
                    count+=(abs(value.second-it->second));
                }
            }
        }
        if(count & 1)
        {
            return 0;
        }
        vector<int>v1;
        vector<int>v2;
        for(auto &value:m1)
        {
            v1.push_back(value.second);
        }
        for(auto &value:m2)
        {
            v2.push_back(value.second);
        }
        sort(v1.begin(),v1.end());
        sort(v2.begin(),v2.end());
        return (v1==v2);

    }
};
