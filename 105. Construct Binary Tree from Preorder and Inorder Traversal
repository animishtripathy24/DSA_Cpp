/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        map<int,int>m;
        
        //at first we have to make the hash of the position
        for(int i=0;i<inorder.size();i++)
        {
            m[inorder[i]]=i;
        }
        
        TreeNode* root= solve(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,m);
        return root;
        
    }
    TreeNode* solve(vector<int>&preorder,int pStart,int pEnd,vector<int>&inorder,int iStart,int iEnd,map<int,int>&m)
    {
        if(pStart>pEnd || iStart>iEnd)
        {
            return NULL;
        }
        
        TreeNode* root=new TreeNode(preorder[pStart]);
        
        int inRoot=m[root->val];
        int numsLeft=inRoot-iStart;
        
        root->left=solve(preorder,pStart+1,pStart+numsLeft,inorder,iStart,inRoot-1,m);
        root->right=solve(preorder,pStart+numsLeft+1,pEnd,inorder,inRoot+1,iEnd,m);
        
        return root;
    }
};
