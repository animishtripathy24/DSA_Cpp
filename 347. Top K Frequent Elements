class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        if(k==1 && nums.size()==1)
        {
            return {1};
        }
        unordered_map<int,int>m;
        for(int i=0;i<nums.size();i++)
        {
            m[nums[i]]++;
        }
        //we have to create a max heap
        priority_queue<pair<int,int>,vector<pair<int,int>>>pq;
        for(auto &value:m)
        {
            pq.push({value.second,value.first});
        }
        int count = 0;
        vector<int>ans;
        while(!pq.empty() && count < k)
        {
            ans.push_back(pq.top().second);
            pq.pop();
            count++;
        }
        return ans;
    }
};
