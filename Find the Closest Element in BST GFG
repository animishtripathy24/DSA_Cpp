/*
Tree Node
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

class Solution
{
    private:
    Node* findFloor(Node* root,Node* &floor,int K)
    {
        while(root)
        {
            if(root->data == K)
            {
                floor=root;
                break;
            }
            else if(K < root->data)
            {
                root= root->left;
            }
            else
            {
                floor=root;
                root=root->right;
            }
        }
    }
    Node* findCeil(Node* root,Node* &ceil,int K)
    {
        while(root)
        {
            if(root->data == K)
            {
                ceil=root;
                break;
            }
            else if(K > root->data)
            {
                root = root->right;
            }
            else
            {
                ceil=root;
                root=root->left;
            }
        }
    }
    public:
    //Function to find the least absolute difference between any node
	//value of the BST and the given integer.
    int minDiff(Node *root, int K)
    {
        Node* ceil=NULL;
        Node* floor=NULL;
        findFloor(root,floor,K);
        findCeil(root,ceil,K);
        if(ceil==NULL)
        {
            return abs(K-floor->data);
        }
        if(floor==NULL)
        {
            return abs(K-ceil->data);
        }
        int a=abs(K-ceil->data);
        int b=abs(K-floor->data);
        return min(a,b);
    }
};
