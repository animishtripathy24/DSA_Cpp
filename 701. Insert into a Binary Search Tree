/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(root==NULL)
        {
            TreeNode* newNode=new TreeNode(val);
            return newNode;
        }
        //we have to make the copy of the root node because we have to return the root node
        TreeNode* curr=root;

        //now we keep on traversing the tree until we get the insert position
        while(true)
        {
            if(val>=curr->val)
            {
                //must lie on the right side..but if right is NULL then
                if(curr->right != NULL)
                {
                    curr=curr->right;
                }
                else
                {
                    //make the new Node with val and insert it to the right of the leaf node
                    TreeNode* newNode=new TreeNode(val);
                    curr->right=newNode;
                    break;
                }
            }
            else
            {
                if(curr->left != NULL)
                {
                    curr=curr->left;
                }
                else
                {
                    //make the new Node and insert it to the left of the curr Node
                    TreeNode* newNode=new TreeNode(val);
                    curr->left=newNode;
                    break;
                }
            }
        }
        return root;
        
    }
};
