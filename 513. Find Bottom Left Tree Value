/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<pair<TreeNode*,int>>q;
        //at first we have to push the root
        q.push({root,0}); // {node,level}
        //also we have to declare a map data structure
        map<int,int>m;
        while(!q.empty())
        {
            auto it=q.front();
            q.pop();
            TreeNode* curr=it.first;
            int level=it.second;
            if(m.find(level)==m.end())
            {
                m[level]=curr->val;
            }
            if(curr->left) q.push({curr->left,level+1});
            if(curr->right) q.push({curr->right,level+1});
        }
        auto it=--m.end();
        return it->second;

    }
};
