class Solution {
  public:
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        vector<int>adjRev[V];
        //reversing the edges
        for(int i=0;i<V;i++)
        {
            for(auto it:adj[i])
            {
                adjRev[it].push_back(i);
            }
        }
        int indegree[V]={0};
        for(int i=0;i<V;i++)
        {
            for(auto it:adjRev[i])
            {
                indegree[it]++;
            }
        }
        queue<int>q;
        for(int i=0;i<V;i++)
        {
            if(indegree[i]==0)
            {
                q.push(i);
            }
        }
        vector<int>safe;
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            safe.push_back(node);
            
            for(auto it:adjRev[node])
            {
                indegree[it]--;
                if(indegree[it]==0)
                {
                    q.push(it);
                }
            }
            
        }
        sort(safe.begin(),safe.end());
        return safe;
    
    }
};
