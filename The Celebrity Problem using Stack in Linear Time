class Solution 
{
    private:
        bool knows(vector<vector<int> >& M,int a,int b,int n)
        {
            if(M[a][b]==1)
            {
                return 1;
            }
            return 0;
        }
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        //at first we have to create a stack
        stack<int>s;
        
        //put all the elements from 0 to n-1 into the stack
        for(int i=0;i<n;i++)
        {
            s.push(i);
        }
        
        //check in the stack whether a potential celebrity exit or not
        while(s.size() > 1)
        {
            int a=s.top();
            s.pop();
            int b=s.top();
            s.pop();
            
            if(knows(M,a,b,n))
            {
                // a is not a potential celebrity
                s.push(b);
            }
            else
            {
                //b is not a potential celebrity
                s.push(a);
            }
        }
        
        //abhi stack me sirf ek hi element hoga..
        int celebrity=s.top();
        s.pop();
        
        //for the rows we have to check whether it contains all zero or not.
        
        int rowCheck=false;
        int rowCount=0;
        
        for(int i=0;i<n;i++)
        {
            if(M[celebrity][i]==0)
            {
                rowCount++;
            }
        }
        if(rowCount==n)
        {
            rowCheck=true;
        }
        
        //for the columns we have to check whether it contains all one or not except the diagonal element
        int colCheck=false;
        int colCount=0;
        
        for(int i=0;i<n;i++)
        {
            if(M[i][celebrity]==1)
            {
                colCount++;
            }
        }
        if(colCount >= n-1)
        {
            colCheck=true;
        }
        
        if(rowCheck && colCheck)
        {
            return celebrity;
        }
        
        return -1;
        
        
    }
};
