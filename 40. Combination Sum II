class Solution {
public:
    void solve(int index,vector<int>&candidates,int target,vector<vector<int>>&ans,vector<int>&ds)
    {
        if(target==0)
        {
            ans.push_back(ds);
            return;
        }

        //we have to try out for all the index
        for(int i=index;i<candidates.size();i++)
        {
            //we have to avoid taking same value
            if(i>index && candidates[i]==candidates[i-1])
            {
                continue;
            }
            if(candidates[i]>target)
            {
                break;
            }
            ds.push_back(candidates[i]);
            solve(i+1,candidates,target-candidates[i],ans,ds);
            ds.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        //AT FIRST WE HAVE TO SORT THE ARRAY
        sort(candidates.begin(),candidates.end());
        //we have to declare a data structure for storing the combinations
        vector<int>ds;
        vector<vector<int>>ans;
        int index=0;
        solve(index,candidates,target,ans,ds);
        return ans;
        
    }
};
