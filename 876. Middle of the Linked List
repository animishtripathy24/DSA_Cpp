/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 
class Solution {
public:
    ListNode* middleNode(ListNode* head) {

        //agar head NULL hai ya head->next NULL hai isss case me head return karna hai
        if(head==NULL || head->next==NULL)
        {
            return head;
        }

        //agar two node hai linked list me
        if(head->next->next==NULL)
        {
            return head->next;
        }

        //use of fast and slow pointer
        ListNode* fast=head->next;
        ListNode* slow=head;

        while(fast != NULL)
        {
            fast=fast->next;
            if(fast != NULL)
            {
                fast=fast->next;
            }
            slow=slow->next;
        }

        //ab hamara slow pointer middle of the linked me hoga
        return slow;
        
    }
};
