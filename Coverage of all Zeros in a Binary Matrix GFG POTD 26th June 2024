class Solution {
private:
    void solve(int row,int col,vector<vector<int>>&matrix,int &count)
    {
        int n=matrix.size();
        int m=matrix[0].size();
        
        for(int delrow=-1;delrow<=1;delrow++)
        {
            for(int delcol=-1;delcol<=1;delcol++)
            {
                //ignore the diagonal cases
                if(abs(delrow)+abs(delcol)==2)
                {
                    continue;
                }
                int nrow=row+delrow;
                int ncol=col+delcol;
                if(nrow >=0 && nrow <n && ncol>=0 && ncol<m && matrix[nrow][ncol]==1)
                {
                    count++;
                }
            }
        }
    }
public:
    int FindCoverage(vector<vector<int>>&matrix){
        int n=matrix.size();
        int m=matrix[0].size();
        int count=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix[i][j]==0)
                {
                    solve(i,j,matrix,count);
                }
            }
        }
        return count;
    }
};
