/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    ListNode* getMiddle(ListNode* head)
    {
        ListNode* fast=head;
        ListNode* slow=head;
        while(fast->next && fast->next->next)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    ListNode* reverse(ListNode* head)
    {
        ListNode* curr=head;
        ListNode* prev=NULL;
        ListNode* next=NULL;
        while(curr != NULL)
        {
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    void merge(ListNode* l1,ListNode* l2)
    {
        while(l2)
        {
            ListNode* nextNode=l1->next;
            l1->next=l2;
            l1=l2;
            l2=nextNode;
        }
    }
public:
    void reorderList(ListNode* head) {
        if(!head || !head->next)
        {
            return;
        }
        ListNode* middle=getMiddle(head);
        ListNode* list2=reverse(middle->next);
        middle->next=NULL;
        ListNode* list1=head;
        merge(list1,list2);
    }
};
