/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        //at first we have to cover all the edge cases
        if(!head || !head->next)
        {
            return head;
        }
        ListNode* odd=head;
        ListNode* even=head->next;
        ListNode* evenHead=head->next;

        //we must apply condition on the even pointer because the even pointer
        //this is because the even pointer will be always ahead of odd pointer
        while(even != NULL && even->next!= NULL)
        {
            odd->next=odd->next->next;
            even->next=even->next->next;

            //increment the odd and even pointers 
            odd=odd->next;
            even=even->next;
        } 

        //join the odd part with the even part of the linked list
        odd->next=evenHead;

        return head;


    }
};
