class Solution{
    private:
    vector<int> topoSort(int V, vector<int> adj[]) 
	{
        //at first we have to declare a indegeree array 
        //that records the number of incoming edge to any node
        int indegree[V]={0};
        
        //now we have to traverse in the adjacent matrix
        for(int i=0;i<V;i++)
        {
            for(auto it:adj[i])
            {
                indegree[it]++;
            }
        }
        
        //now we have to declare a queue data structure and 
        //insert all the nodes with zero indegree
        queue<int>q;
        for(int i=0;i<V;i++)
        {
            if(indegree[i]==0)
            {
                q.push(i);
            }
        }
        //now we have to declare a topo array to store the result
        vector<int>topo;
        
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            
            //we have to insert this node in the topo array
            topo.push_back(node);
            
            
            //traverse for all the adjacent nodes and 
            //check whether the indegree becomes zero or not
            for(auto it:adj[node])
            {
                indegree[it]--;
                if(indegree[it]==0)
                {
                    q.push(it);
                }
            }
        }
        return topo;
	}
    public:
    string findOrder(string dict[], int N, int K) {
        vector<int>adj[K];
        for(int i=0;i<N-1;i++)
        {
            string str1=dict[i];
            string str2=dict[i+1];
            int len=min(str1.size(),str2.size());
            for(int i=0;i<len;i++)
            {
                if(str1[i] != str2[i])
                {
                    adj[str1[i]-'a'].push_back(str2[i]-'a');
                    break;
                }
            }
        }
        vector<int>topo=topoSort(K,adj);
        string str;
        for(auto it:topo)
        {
            str.push_back((char)(it+'a'));
        }
        return str;
        
        
    }
};
