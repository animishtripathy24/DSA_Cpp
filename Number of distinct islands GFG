class Solution {
private:
    void bfs(int row,int col,vector<vector<bool>>&vis,vector<pair<int,int>>&list,vector<vector<int>>&grid,int row0,int col0)
    {
        int n=grid.size();
        int m=grid[0].size();

        //we have to mark in the visited array
        vis[row][col]=true;
        list.push_back({(row-row0),(col-col0)});
        //now we have to declare a queue 
        queue<pair<int,int>>q;
        q.push({row,col});

        //now we have to traverse in the queue
        while(!q.empty())
        {
            auto it=q.front();
            q.pop();
            int row=it.first;
            int col=it.second;

            //now we have to traverse for all its neighbours excluding the diagonal
            for(int delrow=-1;delrow<=1;delrow++)
            {
                for(int delcol=-1;delcol<=1;delcol++)
                {
                    //excluding the diagonal elements
                    if(abs(delrow)+abs(delcol)==2)
                    {
                        continue;
                    }
                    int nrow=row+delrow;
                    int ncol=col+delcol;

            if(nrow >=0 && nrow <n && ncol>=0 && ncol<m && vis[nrow][ncol]==false && grid[nrow][ncol]==1)
                    {
                        vis[nrow][ncol]=true;
                        q.push({nrow,ncol});
                        list.push_back({(nrow-row0),(ncol-col0)});
                    }
                }
            }
        } 
    }
public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        //at first we have to calculate the size of the grid
        int n=grid.size();
        int m=grid[0].size();

        //we have to declare a visited array
        vector<vector<bool>>vis(n,vector<bool>(m,false));
        set<vector<pair<int,int>>>s;
        //we have to traverse in the array
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j] && grid[i][j]==1)
                {
                    vector<pair<int,int>>list;
                    bfs(i,j,vis,list,grid,i,j);
                    s.insert(list);
                }
            }
        }
        return s.size();

        
    }
};
