/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxLevelSum(TreeNode* root) {
        if(!root)
        {
            return 0;
        }
        //declaring a queue ds
        queue<TreeNode*>q;
        q.push(root);
        int level=0;
        map<int,int>m;
        while(!q.empty())
        {
            int size = q.size();
            vector<int>path;
            level++;
            for(int i=0;i<size;i++)
            {
                TreeNode* curr=q.front();
                q.pop();
                if(curr->left)
                {
                    q.push(curr->left);
                }
                if(curr->right)
                {
                    q.push(curr->right);
                }
                path.push_back(curr->val);

            }
            int sum=accumulate(path.begin(),path.end(),0);
            m[level]=sum;
        }
        int maxi=INT_MIN;
        for(auto &value:m)
        {
            maxi=max(maxi,value.second);
        }
        for(auto &value:m)
        {
            if(maxi==value.second)
            {
                return value.first;
            }
        }
        return -1;
        
    }
};
