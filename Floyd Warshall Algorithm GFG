class Solution {
  public:
	void shortest_distance(vector<vector<int>>&matrix){
	    //at first we have to convert all the -1 to 1e9
	    int n=matrix.size();
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<n;j++)
	        {
	            if(matrix[i][j]==-1)
	            {
	                matrix[i][j]=1e9;
	            }
	            if(i==j)
	            {
	                matrix[i][j]=0;
	            }
	        }
	    }
	    
	    //apply the floyd warshall algorithm
	    for(int via=0;via<n;via++)
	    {
	        for(int i=0;i<n;i++)
	        {
	            for(int j=0;j<n;j++)
	            {
	                matrix[i][j]=min(matrix[i][j],(matrix[i][via]+matrix[via][j]));
	            }
	        }
	    }
	    //at the end of the day change all the 1e9s to -1s
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<n;j++)
	        {
	            if(matrix[i][j]==1e9)
	            {
	                matrix[i][j]=-1;
	            }
	        }
	    }
	    
	}
};
