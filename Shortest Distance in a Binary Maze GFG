class Solution {
  public:
    int shortestPath(vector<vector<int>> &grid, pair<int, int> source,
                     pair<int, int> destination) {
        if(source.first == destination.first && source.second == destination.second)
        {
            return 0;
        }
        //at first we have to declare distance array
        vector<vector<int>>dist(grid.size(),vector<int>(grid[0].size(),1e9));
        //mark the distance of the source node as 0;
        dist[source.first][source.second]=0;
        queue<pair<int,pair<int,int>>>q; // {distance,{row,col}}
        q.push({0,{source.first,source.second}});
        while(!q.empty())
        {
            auto it=q.front();
            q.pop();
            int distance=it.first;
            int row=it.second.first;
            int col=it.second.second;
            for(int delrow=-1;delrow<=1;delrow++)
            {
                for(int delcol=-1;delcol<=1;delcol++)
                {
                    //ignore the diagonals moves
                    if(abs(delrow)+abs(delcol)==2)
                    {
                        continue;
                    }
                    int nrow=row+delrow;
                    int ncol=col+delcol;
                    if(nrow >=0 && nrow < grid.size() && ncol>=0 && ncol<grid[0].size() && grid[nrow][ncol]==1 && distance+1 < dist[nrow][ncol])
                    {
                        dist[nrow][ncol]=distance+1;
                        if(nrow == destination.first && ncol == destination.second)
                        {
                            return distance+1;
                        }
                        q.push({dist[nrow][ncol],{nrow,ncol}});
                    }
                }
            }
        }
        return -1;
    }
};
