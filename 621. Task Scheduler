class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        //at first we have to count the frequency
        unordered_map<char,int>m;
        for(int i=0;i<tasks.size();i++)
        {
            m[tasks[i]]++;
        }
        //declaring a max heap
        priority_queue<int>pq;
        for(auto &it:m)
        {
            pq.push(it.second);
        }
        int result=0;
        while(!pq.empty())
        {
            vector<int>v;
            int time=0;
            for(int i=0;i<=n;i++)
            {
                if(!pq.empty())
                {
                    v.push_back(pq.top()-1);
                    pq.pop();
                    time++;
                }
            }

            for(auto &it:v)
            {
                if(it > 0)
                {
                    pq.push(it);
                }
            }
            result += (pq.empty() ? time : n+1);

        }
        return result;

    }
};
