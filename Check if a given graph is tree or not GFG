class Solution {
    private:
        bool bfs(int src,vector<int>adj[],vector<int>&vis)
        {
            //at first we have to mark in the visited array
            vis[src]=1;
            // then we have to declare a queue data structure
            queue<pair<int,int>>q;
            q.push({src,-1});
            while(!q.empty())
            {
                int node=q.front().first;
                int parent=q.front().second;
                q.pop();
                
                //now we have to traverse in the adjacent node
                for(auto &it:adj[node])
                {
                    if(!vis[it])
                    {
                        vis[it]=1;
                        q.push({it,node});
                    }
                    else if(it != parent)
                    {
                        return true;
                    }
                }
            }
            return false;
        }
  public:
    int isTree(int n, int m, vector<vector<int>> &adj) {
        //at first we have to create a adjcency list
        vector<int>arr[n];
        for(int i=0;i<m;i++)
        {
            arr[adj[i][0]].push_back(adj[i][1]);
            arr[adj[i][1]].push_back(adj[i][0]);
        }
        //now we have to declare a visited array
        vector<int>vis(n,0);
        if(bfs(0,arr,vis))
        {
            return 0;
        }
        for(auto &it:vis)
        {
            if(it==0)
            {
                return 0;
            }
        }
        return 1;
        
    }
};
