/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
int findFloor(vector<int>&arr,int n,int x)
{
    int low=0;
    int high=n-1;
    int ans=-1;
    while(low <= high)
    {
        int mid=low+((high-low)>>1);
        if(arr[mid]<= x)
        {
            ans=mid;
            low=mid+1;
        }
        else
        {
            high=mid-1;
        }
    }
    return ans==-1?-1:arr[ans];
}
int findCeil(vector<int>&arr,int n,int x)
{
    int low=0;
    int high=n-1;
    int ans=-1;
    while(low <= high)
    {
        int mid=low+((high-low)>>1);
        if(arr[mid]>= x)
        {
            ans=mid;
            high=mid-1;
        }
        else
        {
            low=mid+1;
        }
    }
    return ans==-1?-1:arr[ans];
}
void findInorder(TreeNode* root, vector<int>&ans)
{
    if(root == NULL)
    {
        return;
    }
    findInorder(root->left,ans);
    ans.push_back(root->val);
    findInorder(root->right,ans);
}
public:
    vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {
        vector<vector<int>>ans;
        vector<int>inorder;
        findInorder(root,inorder);
        for(auto &it:queries)
        {
            vector<int>temp;
            temp.push_back(findFloor(inorder,inorder.size(),it));
            temp.push_back(findCeil(inorder,inorder.size(),it));
            ans.push_back(temp);
        }
        return ans;
    }
};
