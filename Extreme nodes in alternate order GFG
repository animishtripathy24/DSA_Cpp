/*
 A binary tree node has data, pointer to left child
   and a pointer to right child 
struct Node
{
    int data;
    Node* left;
    Node* right;
};
*/

class Solution{
  public:
    /* Function to print nodes of extreme corners
    of each level in alternate order */
    vector<int> ExtremeNodes(Node* root)
    {
        if(root==NULL)
        {
            return {};
        }
        int count=1;
        map<int,int>m;
        queue<Node*>q;
        q.push(root);
        while(!q.empty())
        {
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                Node* curr=q.front();
                q.pop();
                if((count & 1)==0)
                {
                    if(m.find(count)==m.end())
                    {
                        m[count]=curr->data;
                    }
                }
                else
                {
                    m[count]=curr->data;
                }
                if(curr->left)
                {
                    q.push(curr->left);
                }
                if(curr->right)
                {
                    q.push(curr->right);
                }
            }
            count++;
        }
        vector<int>ans;
        for(auto &value:m)
        {
            ans.push_back(value.second);
        }
        return ans;
        
    }
};
