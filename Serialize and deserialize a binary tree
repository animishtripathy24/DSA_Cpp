/* A binary tree node has data, pointer to left child
   and a pointer to right child  
struct Node
{
    int data;
    Node* left;
    Node* right;
}; */


class Solution
{
    private:
    void inorder(Node* root,vector<int>&ans)
    {
        if(root== NULL)
        {
            return;
        }
        inorder(root->left,ans);
        ans.push_back(root->data);
        inorder(root->right,ans);
    }
    public:
    //Function to serialize a tree and return a list containing nodes of tree.
    vector<int> serialize(Node *root) 
    {
        if(root == NULL)
        {
            return {};
        }
       vector<int>v;
       inorder(root,v);
       return v;
    }
    
    //Function to deserialize a list and construct the tree.
    Node * deSerialize(vector<int> &A)
    {
        if(A.size() == 0)
        {
            return NULL;
        }
        Node* root= new Node(A[0]);
        for(int i=1;i<A.size();i+=2)
        {
            Node* newNode= new Node(A[i]);
            newNode->left=root;
            if(i+1 < A.size())
            {
                newNode->right= new Node(A[i+1]);
            }
            root= newNode;
        }
        return root;
    }

};
