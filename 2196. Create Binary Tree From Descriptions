/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        unordered_set<int>childSet;
        unordered_map<int,TreeNode*>m;
        for(auto &it:descriptions)
        {
            int parent = it[0];
            int child = it[1];
            int isLeft = it[2];

            if(m.find(parent) == m.end())
            {
                m[parent]= new TreeNode(parent);
            }
            if(m.find(child) == m.end())
            {
                m[child]= new TreeNode(child);
            }
            if(isLeft == 1)
            {
                m[parent]->left = m[child];
            }
            else
            {
                m[parent]->right = m[child];
            }

            childSet.insert(child);
        }
        for(auto &it : descriptions)
        {
            if(childSet.find(it[0]) == childSet.end())
            {
                return m[it[0]];
            }
        }
        return NULL;  //it will never reach here
    }
};
