class Solution {
private:
    void merge(vector<int>&arr,int low,int mid,int high)
    {
        int left=low;
        int right=mid+1;
        vector<int>temp;
        while(left <=mid && right<=high)
        {
            if(arr[left]<arr[right])
            {
                temp.push_back(arr[left++]);
            }
            else
            {
                temp.push_back(arr[right++]);
            }
        }
        while(left <=mid)
        {
            temp.push_back(arr[left++]);
        }
        while(right <=high)
        {
            temp.push_back(arr[right++]);
        }
        //now we will copy the elements from the temporary array to the original array
        for(int i=low;i<=high;i++)
        {
            arr[i]=temp[i-low];
        }
    }
    int countPairs(vector<int>&nums,int low,int mid,int high)
    {
        int right=mid+1;
        int count=0;
        for(int i=low;i<=mid;i++)
        {
            while(right <=high && (long)nums[i]>(2*(long)nums[right]))
            {
                right++;
            }
            count+=(right-(mid+1));
        }
        return count;
    }
    int mergeSort(vector<int>&nums,int low,int high)
    {
        int count=0;
        if(low >=high)
        {
            return count;
        }
        //now we will have to find the mid
        int mid=(low+high)>>1;
        count+=mergeSort(nums,low,mid);
        count+=mergeSort(nums,mid+1,high);
        count+=countPairs(nums,low,mid,high);
        merge(nums,low,mid,high);
        return count;
    }
public:
    int reversePairs(vector<int>& nums) {
        return mergeSort(nums,0,nums.size()-1);
    }
};
