# 297. Serialize and Deserialize Binary Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(root == NULL)
        {
            return "";
        }
        //at first we will declare a string
        string str;
        //now we have to declare a queue data structure
        queue<TreeNode*>q;
        q.push(root);

        while(!q.empty())
        {
            TreeNode* curr=q.front();
            q.pop();
            if(curr == NULL)
            {
                str.push_back('#');
                str.push_back(',');
            }
            else
            {
                str+=to_string(curr->val);
                str.push_back(',');
            }

            if(curr != NULL)
            {
                q.push(curr->left);
                q.push(curr->right);
            }
        }
        // cout << str;
        return str;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.size()==0)
        {
            return NULL;
        }
        stringstream s(data);
        string str;
        getline(s,str,',');
        TreeNode* root=new TreeNode(stoi(str));
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty())
        {
            TreeNode* curr=q.front();
            q.pop();

            getline(s,str,',');
            if(str == "#")
            {
                curr->left = NULL;
            }
            else
            {
                TreeNode* leftChild=new TreeNode(stoi(str));
                curr->left=leftChild;
                q.push(leftChild);
            }

            getline(s,str,',');
            if(str == "#")
            {
                curr->right = NULL;
            }
            else
            {
                TreeNode* rightChild=new TreeNode(stoi(str));
                curr->right=rightChild;
                q.push(rightChild);
            }
        }
        return root;
    }

};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
