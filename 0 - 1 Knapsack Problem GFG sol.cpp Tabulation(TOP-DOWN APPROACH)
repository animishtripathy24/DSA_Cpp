class Solution {
  private:
    void solve(vector<int>&wt,vector<int>&val,int W,int n,vector<vector<int>>&t)
    {
        //initialization
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<W+1;j++)
            {
                if(i == 0 || j == 0)
                {
                    t[i][j]=0;
                }
            }
        }
        
        //calculate for rest of the cells
        //according to the recursive code
        for(int i = 1;i < n+1;i++)
        {
            for(int j = 1 ; j < W+1 ; j++)
            {
                if(wt[i-1] <= j)
                {
                    t[i][j] = max(val[i-1] + t[i-1][j-wt[i-1]],t[i-1][j]);
                }
                else
                {
                    t[i][j] = t[i-1][j];
                }
            }
        }
    }
  public:
    // Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, vector<int>& wt, vector<int>& val) {
        int n = wt.size();
        vector<vector<int>>t(n+1,vector<int>(W+1,0));
        solve(wt,val,W,n,t);
        return t[n][W];
    }
};
