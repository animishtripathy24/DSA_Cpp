class Solution {
private:
    void bfs(int row,int col,vector<vector<int>>&grid,vector<vector<int>>&vis)
    {
        int n=grid.size();
        int m=grid[0].size();

        //at first we have to mark in the visited array
        vis[row][col]=1;
        queue<pair<int,int>>q;
        q.push(make_pair(row,col));

        while(!q.empty())
        {
            auto it=q.front();
            q.pop();
            int row=it.first;
            int col=it.second;

            for(int delrow=-1;delrow<=1;delrow++)
            {
                for(int delcol=-1;delcol<=1;delcol++)
                {
                    if(abs(delrow)+abs(delcol)==2)
                    {
                        continue;
                    }
                    int nrow=row+delrow;
                    int ncol=col+delcol;
                    if(nrow>=0 && nrow <n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && !vis[nrow][ncol])
                    {
                        vis[nrow][ncol]=1;
                        q.push({nrow,ncol});
                    }
                }
            }

        }

    }
public:
    int numEnclaves(vector<vector<int>>& grid) {
        //at first we have to calculate the dimensions
        int n=grid.size();
        int m=grid[0].size();

        //then we have to make a visited array
        vector<vector<int>>vis(n,vector<int>(m,0));

        //then we have to traverse all the boundary rows
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i==0 || j==0 || i==n-1 || j==m-1)
                {
                    if(grid[i][j]==1 && !vis[i][j])
                    {
                        bfs(i,j,grid,vis);
                    }
                }
            }
        }
        int count = 0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1 && !vis[i][j])
                {
                    count++;
                }
            }
        }
        return count;
    }
};
