class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        //defining the row and column of the matrix
        int n = mat.size();
        int m = mat[0].size();

        vector<vector<int>>vis(n,vector<int>(m,0));
        vector<vector<int>>dist(n,vector<int>(m,0));
        queue<pair<pair<int,int>,int>>q;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(mat[i][j]==0)
                {
                    q.push({{i,j},0});
                    //marking in the visited array
                    vis[i][j]=1;
                }
                else
                {
                    //unmarking in the visited array
                    vis[i][j]=0;
                }
            }
        }
        //we have to traverse till the queue is non empty
        while(!q.empty())
        {
            auto it=q.front();
            q.pop();
            int row=it.first.first;
            int col=it.first.second;
            int step=it.second;
            //marking in the distance matrix
            dist[row][col]=step;
            for(int delrow=-1;delrow<=1;delrow++)
            {
                for(int delcol=-1;delcol<=1;delcol++)
                {
                    if(abs(delrow)+abs(delcol)==2)
                    {
                        continue;
                    }
                    int nrow=row+delrow;
                    int ncol=col+delcol;
                    if(nrow >=0 && nrow <n && ncol >=0 && ncol <m && vis[nrow][ncol]==0)
                    {
                        //marking in the visited array
                        vis[nrow][ncol]=1;
                        q.push({{nrow,ncol},step+1});
                    }
                }
            }
        }
        return dist;
        
    }
};
