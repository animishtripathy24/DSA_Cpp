/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root)
        {
            return 0;
        }
        int maxi=0;
        queue<pair<TreeNode*,long long int>>q;//{root,level}
        q.push({root,0});

        while(!q.empty())
        {
            int size=q.size();
            //now we will store the minimum index
            int minIndex=q.front().second;
            int firstIndex,lastIndex;
            for(int i=0;i<size;i++)
            {
                long long int curr_index=q.front().second-minIndex;
                TreeNode* node=q.front().first;
                q.pop();
                if(i==0)
                {
                    firstIndex=curr_index;
                }
                if(i==size-1)
                {
                    lastIndex=curr_index;
                }

                //if the left node exists then push it into the queue 
                if(node->left)
                {
                    q.push({node->left,2*curr_index+1});
                }
                if(node->right)
                {
                    q.push({node->right,2*curr_index+2});
                }
            }
            maxi=max(maxi,(lastIndex-firstIndex+1));
        }
        return maxi;
    }
};
